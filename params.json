{"name":"Svg.draw.js","tagline":"An extension of svn.js which allows to draw elements with mouse","body":"svg.draw.js\r\n===========\r\n\r\nAn extension of [svg.js](https://github.com/wout/svg.js) which allows to draw elements with your mouse\r\n\r\n# Demo\r\n\r\nFor a demo see http://fuzzyma.github.io/svg.draw.js/\r\n\r\n# Get Started\r\n\r\n- Install `svg.draw.js` using bower:\r\n\r\n\t\tbower install svg.draw.js\r\n\r\n- Include the script after svg.js into your page\r\n\r\n\t\t<script src=\"svg.js\"></script>\r\n\t\t<script src=\"svg.draw.js\"></script>\r\n\r\n- Draw your first rectangle using this simple piece of code:\r\n\r\n\t\t<div id=\"myDrawing\"></div>\r\n\r\n\t\tvar drawing = new SVG('myDrawing').size(500, 500);\r\n\t\tdrawing.rect().draw()\t// Here we init a rectangle and start drawing it\r\n\r\n# Usage\r\n\r\nAs default the drawing starts with a click on the svg-Element\r\n\r\n\r\n    var draw = SVG('drawing');\r\n    draw.rect().draw(options);\r\n\r\n\r\nYou can use your own mouse-events. Just pass the event-Object to the draw-Function\r\n\r\n\r\n    var drawing = SVG('myDrawing');\r\n    var rect = draw.rect();\r\n\r\n    draw.on('mousedown', function(event){\r\n        rect.draw(event, options);\r\n    });\r\n    draw.on('mouseup', function(event){\r\n        rect.draw(event);\r\n    });\r\n\r\nThe addon automatically knows when to start or stop drawing (most shapes start with the first event and stop with the second).\r\nHowever when dealing with e.g. a polygon you are able to set new points with every event. To finish the drawing you have to call the `done`-function.\r\nSee the next chapter for that.\r\n\r\n# Methods\r\n\r\n`svg.draw.js` populates its methods it uses to draw the shape. This is useful in edgecases but generally not needed. However the method `done` is needed for poly-shapes and `cancel` can be called on every shape to stop drawing and remove the shape.\r\n\r\n\t// Finishes the poly-shape\r\n\tpolygon.draw('done');\r\n\r\n\t// Cancels drawing of a shape, removes it\r\n\tpolygon.draw('cancel');\r\n\r\n\t/* The following are only useful in edge-cases */\r\n\r\n\t// Draws a new point with the help of (mouse-)event\r\n\tpolygon.draw('point', event)\r\n\r\n\t// Draws the point while moving the mouse (basically the animation)\r\n\tpolygon.draw('update', evnt)\r\n\r\n\t// Stop drawing, cleans up\r\n\tpolygon.draw('stop', event)\r\n\t\r\n# Options\r\n\r\nThe following options can be used to modify the behavior of the addon:\r\n\r\n- `snapToGrid`: Specifies a grid to which a point is aligned (`default:1`)\r\n\r\n**Note** that you can specify the options only on the first call. When you want to change the options while drawing use `polygon.draw('params', key, value)` This is useful when you want to activate the grid-option when ctrl or soemthing is pressed.\r\n\r\n# Events\r\n\r\n`svg.draw.js` fires a few specific events which are:\r\n\r\n- drawstart\r\n- drawstop\r\n- drawudpdate\r\n- drawpoint\r\n- drawdone\r\n- drawcancel\r\n\r\nThese events are called at the end of the corresponding method.\r\n\r\nEach event-object holds the relative position to the parent-Object of the Shape (which is mostly the SVG-doc itself) as Array\r\n\r\nBinding a function to the Event is easy\r\n\r\n    var draw = SVG('drawing');\r\n    draw.rect().draw();\r\n    rect.on('drawstart', function(event){\r\n        console.log(e.detail); // Holds event, current Point-coords and matrix\r\n    });\r\n\r\n# Plugins\r\n\r\nCurrently `svg.draw.js` only supports all the basic shapes (line, polyline, polygone, rect, image, circle, ellipse).\r\nAny other type you want to draw and is available through `SVG.invent` (e.g. image or your own element) can be added using a plugin which just serves the functions to draw the shape.\r\n\r\nFor example:\r\n\r\n\r\n    SVG.Element.prototype.draw.extend('line polyline polygon', {\r\n\r\n\t\t// add methods here which should be added to the draw-object\r\n\t\t// e.g.\r\n\t\tfoo: function(){\r\n\t\t\t// can access this\r\n\t\t}\r\n\r\n\t\t// or even variables\r\n\t\tbar:5\r\n\r\n\t}\r\n\r\nMethod `calc` is always needed which updates the point of the shape.\r\n\r\nYou also can extend two shape-types at once:\r\n\r\n    SVG.Element.prototype.draw.extend({\r\n\r\n\t\t'line polyline polygon': {\r\n\t\t\t// add methods here which should be added to the draw-object\r\n\t\t\t// e.g.\r\n\t\t\tfoo: function(){\r\n\t\t\t\t// can access this\r\n\t\t\t}\r\n\r\n\t\t\t// or even variables\r\n\t\t\tbar:5\r\n\t\t}\r\n\r\n\r\n\t\t'circle':{\r\n\t\t\t// something\r\n\t\t}\r\n\t}\r\n\r\nSee the implementation of all shapes as examples.\r\n\r\n\r\n# Changes in svg.draw.js v2\r\n\r\n- all shapes implemented as plugins\r\n- drawing takes transformations into account (you can even draw e.g. a rotated rectangle)\r\n- useRadius option is obsolete duo to the implementation of circle in svg.js v2","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}